<?xml version="1.0"?>

<launch>



	<!-- arguments used primarily for the gazebo_ros pkg's launch file "empty_world.launch" -->
	<arg name="paused"       default="false" />
	<arg name="use_sim_time" default="true" />
	<arg name="gui"          default="true" />
	<arg name="headless"     default="false" />
	<arg name="debug"        default="false" />

	<!-- cmd_vel param to direct the topic name for our movement msgs -->
	<param name="cmd_vel_topic" value="/RosAria/cmd_vel"/>



	<!-- Open an empty world in Gazebo -->
	<include file="$(find gazebo_ros)/launch/empty_world.launch">
		<arg name="world_name" value="$(find native)/worlds/room12x12.world" /> <!-- can be changed -->
		<arg name="debug" value="$(arg debug)" />
		<arg name="gui" value="$(arg gui)" />
		<arg name="paused" value="$(arg paused)" />
		<arg name="use_sim_time" value="$(arg use_sim_time)" />
		<arg name="headless" value="$(arg headless)" />
	</include>



	<!-- Load the URDF of the P3DX with a Kinect into the ROS Parameter Server -->
	<param name="robot_description" command="$(find xacro)/xacro.py '$(find native)/urdf/p3dx_kinect.xacro'" />

	<!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
	<node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
		respawn="false" output="screen" args="-urdf -model pioneer -param robot_description" />



        <!-- Publish the P3-DX's state to tf -->
	<node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
        	<param name="publish_frequency" type="double" value="30.0" />
	</node>

	<node pkg="tf" type="static_transform_publisher" name="base_link_to_base_footprint" args="0 0 0 0 0 0          base_link base_footprint 50"/>
	<node pkg="tf" type="static_transform_publisher" name="base_link_to_center_wheel"   args="-0.2 0 0.036 0 0 0   base_link center_wheel 50"/>
	<node pkg="tf" type="static_transform_publisher" name="base_link_to_swivel"         args="-0.178 0 0.052 0 0 0 base_link swivel 50"/>

	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />

	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find native)/config/basic_sim.rviz" />



	<!-- Control the P3DX model with the ARC -->
	<node name="p3dx_mover" type="mover.py" pkg="native" output="screen" required="true"/>



	<!-- Take the Kinect and get a Fake Laser Scan. A Nodelet will help optimize our process of obtaining these scans -->
	<node pkg="nodelet" type="nodelet" name="laserscan_nodelet_manager" args="manager"/>

	<node pkg="nodelet" type="nodelet" name="depthimage_to_laserscan" args="load depthimage_to_laserscan/DepthImageToLaserScanNodelet laserscan_nodelet_manager">
		<param name="scan_height" value="10"/>
		<param name="output_frame_id" value="/camera_depth_frame"/>
		<param name="range_min" value="0.45"/>

		<remap from="image" to="/camera/depth/image_raw"/>
		<remap from="scan" to="/scan"/>

	</node>




















	<arg name="HOME"                    default="/home/abdul"/>
	<arg name="rtabmapviz_cfg"          default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />
	
	<!-- If openni.launch is changed, these topic names may also need to be changed -->
	<arg name="rgb_topic"               default="/camera/rgb/image_rect_color" />
	<arg name="depth_registered_topic"  default="/camera/depth_registered/image_raw" />
	<arg name="camera_info_topic"       default="/camera/rgb/camera_info" />

	<arg name="subscribe_scan"          default="false"/>
	<arg name="subscribe_scan_cloud"    default="false"/>     
	<arg name="scan_topic"              default="/hokuyo/base_scan"/>
	<arg name="scan_cloud_topic"        default="/scan_cloud"/>
	
	<arg name="odom_topic"              default="/RosAria/pose"/>
	<arg name="visual_odometry"         default="false"/>

	<!-- cmd_vel param to direct the topic name for our movement msgs -->
	<param name="cmd_vel_topic" value="/RosAria/cmd_vel"/>




	<node pkg="tf" type="static_transform_publisher" name="base_to_camera" args="0 0 0 0 0 0 /base_link /camera_link 100" /> <!-- To relate the camera's tf tree to the P3-DX's "basic" tf tree -->
  
	<group ns="rtabmap">

    <node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" output="screen" args="--delete_db_on_start">

      <param name="frame_id" type="string" value="base_link"/>
      <param name="subscribe_depth" type="bool" value="true"/>
      <param name="subscribe_scan" type="bool" value="true"/>

      <remap from="scan" to="/hokuyo/base_scan"/>
      <remap from="odom" to="/RosAria/pose"/>
      <remap from="rgb/image" to="/camera/rgb/image_rect_color"/>
      <remap from="depth/image" to="/camera/depth_registered/image_raw"/>
      <remap from="rgb/camera_info" to="/camera/rgb/camera_info"/>
      <param name="queue_size" type="int" value="10"/>

      <!-- RTAB-Map's parameters -->
      <param name="RGBD/AngularUpdate" type="string" value="0.01"/>
      <param name="RGBD/LinearUpdate" type="string" value="0.01"/>
      <param name="Rtabmap/TimeThr" type="string" value="700"/>
      <param name="Mem/RehearsalSimilarity" type="string" value="0.45"/>
      <param name="RGBD/OptimizeFromGraphEnd" type="string" value="true"/>

    </node>

  </group>


	<node pkg="topic_tools" type="relay" name="map_relay" args="/rtabmap/grid_map /map" />




</launch>

