<?xml version="1.0"?>

<launch>



	<arg name="HOME"                    default="/home/abdul"/>
	<arg name="rtabmapviz_cfg"          default="-d $(find rtabmap_ros)/launch/config/rgbd_gui.ini" />
	
	<!-- If openni.launch is changed, these topic names may also need to be changed -->
	<arg name="rgb_topic"               default="/camera/rgb/image_rect_color" />
	<arg name="depth_registered_topic"  default="/camera/depth_registered/image_raw" />
	<arg name="camera_info_topic"       default="/camera/rgb/camera_info" />

	<arg name="subscribe_scan"          default="false"/>
	<arg name="subscribe_scan_cloud"    default="false"/>     
	<arg name="scan_topic"              default="/scan"/>
	<arg name="scan_cloud_topic"        default="/scan_cloud"/>
	
	<arg name="odom_topic"              default="/RosAria/pose"/>
	<arg name="visual_odometry"         default="false"/>

	<!-- argument that defines the port that will be used to interface with the P3-DX from our laptop -->
	<arg name="port_val"                default="/dev/ttyUSB0"/>

	<!-- cmd_vel param to direct the topic name for our movement msgs -->
	<param name="cmd_vel_topic" value="/RosAria/cmd_vel"/>



	<!-- This section launches openni.launch, which launches the RGBD camera and makes all of the nodes/topics available -->
	<include file="$(find openni_launch)/launch/openni.launch"> 
		<arg name = "depth_registration" value = "true"/>
	</include>



	<node pkg="depthimage_to_laserscan" type="depthimage_to_laserscan" name="depthimage_to_laserscan">

		<param name="scan_height"     value="60"/>
		<param name="output_frame_id" value="/camera_depth_frame"/>
		<param name="range_min"       value="0.45"/>
		<param name="range_max"       value="4.0"/>

		<remap from="image"           to="$(arg depth_registered_topic)"/>
		<remap from="scan"            to="$(arg scan_topic)"/>

	</node>



	<node pkg="tf" type="static_transform_publisher" name="base_to_camera" args="0 0 0 0 0 0 /base_link /camera_link 100" /> <!-- To relate the camera's tf tree to the P3-DX's "basic" tf tree -->



	<group ns="rtabmap">

		<node name="rtabmap" pkg="rtabmap_ros" type="rtabmap" args="--delete_db_on_start" required="true">

			<param name="frame_id"             type="string" value="base_link"/>
			<param name="subscribe_depth"      type="bool" value="true"/>
			<param name="subscribe_laserScan"  type="bool" value="true"/>

			<remap from="odom"            to="$(arg odom_topic)"/>
			<remap from="scan"            to="$(arg scan_topic)"/>
			<remap from="rgb/image"       to="$(arg rgb_topic)"/>
			<remap from="depth/image"     to="$(arg depth_registered_topic)"/>
			<remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>

			<param name="scan_voxel_size"              type="str"      value="0.01" />
			<param name="queue_size"                   type="int"      value="10"/>

			<param name="Rtabmap/DatabasePath"         type="string"   value="$(arg HOME)/.ros/rtabmap.db"/> 
			<param name="Rtabmap/DetectionRate"        type="string"   value="2"/>
			<param name="Rtabmap/TimeThr"              type="string"   value="0"/> 

			<param name="Mem/IncrementalMemory"        type="string"   value="true"/>          
			<param name="Mem/BadSignaturesIgnored"     type="string"   value="false"/>      
			<param name="Mem/RehearsalSimilarity"      type="string"   value="0.45"/>
<!--			<param name="Mem/RehearsedNodesKept"       type="string"   value="false"/>--><!-- -->
    
<!--			<param name="DbSqlite3/CacheSize"          type="string"   value="10000"/>           
-->			<param name="RGBD/ScanMatchingSize"        type="string"   value="0"/> <!-- -->
			<param name="RGBD/LocalLoopDetectionSpace" type="string"   value="false"/> <!-- -->
			<param name="RGBD/LocalLoopDetectionTime"  type="string"   value="false"/> <!-- -->
			<param name="RGBD/AngularUpdate"           type="string"   value="0.01"/>            
			<param name="RGBD/LinearUpdate"            type="string"   value="0.01"/>   
			<param name="RGBD/OptimizeFromGraphEnd"    type="string"   value="false"/>    

			<param name="Reg/Strategy"                 type="string"   value="2"/> <!-- -->
			<param name="Optimizer/Iterations"         type="string"   value="100"/>
			<param name="Icp/VoxelSize"                type="string"   value="0"/>
			<param name="Vis/MinInliers"               type="string"   value="5"/>                 
			<param name="Vis/MaxDepth"                 type="string"   value="4.0"/>                 
			<param name="Vis/InlierDistance"           type="string"   value="0.05"/>
			<param name="Odom/MinInliers"              type="string"   value="10"/>              
			
		</node>

	</group>

	<node pkg="topic_tools" type="relay" name="map_relay" args="/rtabmap/grid_map /map" />

	<node pkg="rtabmap_ros" type="rtabmapviz" name="rtabmapviz" args="$(arg rtabmapviz_cfg)" launch-prefix="" respawn="true">

		<param name="subscribe_depth"       type="bool"   value="true"/>
		<param name="subscribe_scan"        type="bool"   value="$(arg subscribe_scan)"/>
		<param name="subscribe_scan_cloud"  type="bool"   value="$(arg subscribe_scan_cloud)"/>
		<param name="subscribe_odom_info"   type="bool"   value="$(arg visual_odometry)"/>
		<param name="frame_id"              type="string" value="base_link"/>
		<param name="wait_for_transform_duration"  type="double"   value="0.2"/>

		<remap from="rgb/image"       to="$(arg rgb_topic)"/>
		<remap from="depth/image"     to="$(arg depth_registered_topic)"/>
		<remap from="rgb/camera_info" to="$(arg camera_info_topic)"/>
		<remap from="scan"            to="$(arg scan_topic)"/>
		<remap from="scan_cloud"      to="$(arg scan_cloud_topic)"/>
		<remap unless="$(arg visual_odometry)" from="odom"  to="$(arg odom_topic)"/>

	</node>


	<!-- Interface with the P3-DX -->
	<node name="RosAria" pkg="rosaria" type="RosAria" required="true">
		<param name="port" value="$(arg port_val)"/>
		<remap from="/RosAria/pose" to="$(arg odom_topic)"/>
	</node>



	<!-- Control the P3DX model with the ARC -->
	<node name="map_mover" type="map_mover.py" pkg="native" output="screen" required="true"/>



	<!-- Publish joint states for rviz to access -->
	<node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher" />
	<node name="rviz" pkg="rviz" type="rviz" args="-d $(find native)/config/real_rosaria.rviz" />



</launch>

